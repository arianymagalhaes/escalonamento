package br.com.escalolamento;


import java.util.ArrayList;
import java.util.Scanner;

public class Escalonamento {

	public static void main(String[] args) {
		
		/**
		 * @author 
		 * Este programa exemplifca a utilização de um processo escalonado por tempo em java
		 *  */
		
		int[][]processos;//MATRIX (?x2) QUE ARMAZENARÁ NA COLUNA 0 O TEMPO DO PROCESSO E NA COLUNA 1 O TEMPO LIMITE
		Scanner s = new Scanner(System.in);//RECEBERÁ AS ENTRADAS DO TECLADO
		int qtdProcessos=0;//NUMERO DE PROCESSOS QUE SERÃO EXECUTADO EM CADA INTERAÇÃO		
		int tempoAtual=0;//CONTROLE DE TEMPO		
		ArrayList<Integer>ordemExecucao;//ARMAZERÁ AS INFORMAÇOES DOS PROCESSOS QUE SERÃO EXECUTADOS NA ORDEM DE EXECUÇÃO
		ArrayList<String>estouro;//AMAZENARÁ AS INFORMAÇÕES SOBRE OS PROCESSO QUE ESTOURARAM O TEMPO
		int menorTempo=0;//SERÁ UTILIZADO PARA ORDENAR O PROCESSO NA ORDEM CERTA
		
		System.out.println("O tempo atual é: "+tempoAtual);
		System.out.println("Quantos processos serão executados?");
		qtdProcessos = s.nextInt();
		processos = new int[qtdProcessos][2];
		//ENQUANTO EXISTIREM PROCESSOS A SEREM EXECUTADOS PERMANECERÁ NO LAÇO
		while(qtdProcessos!=0) {
			//RECEBE O TEMPO DE EXECUÇÃO E O TEMPO LIMITE QUE CADA PROCESSO TEM PARA SER EXECUTADO			
			for(int x =0;x<qtdProcessos;x++) {	
				//RECEBE O TEMPO QUE O PROCESSO LEVA PRA SER EXECUTADO
				System.out.println("O "+(x+1)+"º Processo leva quanto tempo: ");
				processos[x][0]= s.nextInt();
				//O TEMPO DENTRO DO QUAL O PROCESSO DEVERÁ SER EXECUTADO
				/**
				 * O tempo limite foi incluido nesse exemplo para mostra melhor como o progrma prioriza os processo pelo menor tempo
				 * sendo assim considere este valor como sendo uma variavel que poderia ser utilizada como critério para definir qual processo
				 * deveria ser iniciado primeiro, nesse caso o tempo limite deve ser informado como um valor superior ao tempo atual e superior 
				 * a Tempo atual + Tempo de Execução
				 *  */
				System.out.println("O tempo limite do "+(x+1)+"º Processo é: ");
				processos[x][1]= s.nextInt();
				
				//REALIZA A VALIDAÇÃO DO TEMPO LIMITE, ENAQUANTO O VALOR INFORMADO NÃO ATENDER AS RESTRIÇÕES SERÁ SOLICITADO QUE O USUARIO INFORME NOVAMENTO UM VALOR VÁLIDO				
				if(processos[x][1]<=tempoAtual || processos[x][1]<=processos[x][0]+tempoAtual)
				{
					while(processos[x][1]<=tempoAtual || processos[x][1]<=processos[x][0]+tempoAtual) {
						System.out.println("Deve ser superior ao tempo atual e superior a Tempo atual + Tempo de Execução!");
						System.out.println("O tempo limite do "+(x+1)+"º Processo é: ");
						processos[x][1]= s.nextInt();
					}
				}
			}			
			ordemExecucao = new ArrayList<>();
			//DEFINE A ORDEM DE EXECUÇÃO DOS PROCESSOS INFORMADOS PRIORIZANDO CADA UM PELO TEMPO QUE LEVAM PARA COMPLETAR A AÇÃO DO MENOR PARA O MAIOR
			while (ordemExecucao.size()<qtdProcessos) {
				int idAtualMenor=-1;
				for(int x=0;x<processos.length;x++) {
					if((menorTempo==0 || processos[x][0]<menorTempo) && !ordemExecucao.contains(x)) {					
						menorTempo= processos[x][0];
						idAtualMenor=x;
					}
				}
				ordemExecucao.add(idAtualMenor);
				menorTempo=0;			
			}	
			estouro = new ArrayList<>();
			//EXEMPLIFICA AS AÇÕES SENDO EXECUTADAS		
			for(int i:ordemExecucao) {
				System.out.println("O "+i+"º Processo foi executado em "+(tempoAtual+processos[i][0])+"ms");
				tempoAtual+=processos[i][0];
				//ESSA ITERAÇÃO VERIFICA SE ALGUM PROCESSO FOI EXECUTADO FORA DO TEMPO PREVISTO E LANÇA A MENSAGEM INFORMANDO O TEMPO DE ATRASO
				for(int x=0;x<processos.length;x++) {
					if(processos[i][0]<tempoAtual) {
						estouro.add("O "+i+"º Processo estourou o tempo em: "+(tempoAtual-processos[i][0])+"ms");
						break;
					}
				}
			}
			//SE EXISTIR TAREFAS QUE ESTOURARAM O TEMPO PREVISTO ELAS SERÃO EXIBIDAS AQUI
			System.out.println("PROBLEMAS:");
			for(String s1:estouro) {
				System.out.println(s1);
			}
			System.out.println("-------------------");
			//INICIA UMA NOVA SEQUENCIA DE PROCESSOS
			tempoAtual=0;
			System.out.println("O tempo atual é: "+tempoAtual);
			System.out.println("Quantos processos serão executados?");
			qtdProcessos = s.nextInt();
			processos = new int[qtdProcessos][2];
			
		}
		
		
	}

}


